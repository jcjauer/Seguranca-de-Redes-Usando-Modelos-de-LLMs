#!/usr/bin/env python3
"""
Teste Focado - Extra√ß√£o de Streams TCP e An√°lise YARA
Testa apenas as funcionalidades espec√≠ficas solicitadas
"""

import os
import sys

def testar_melhorias_focadas():
    """Testa apenas as melhorias focadas: streams TCP e YARA"""
    
    print("üéØ TESTE FOCADO: STREAMS TCP + YARA")
    print("=" * 50)
    
    # Arquivo de teste
    arquivo_teste = "amostra.pcap"
    if not os.path.exists(arquivo_teste):
        # Tentar arquivos alternativos
        arquivos_alternativos = [
            "2013-12-23-Neutrino-EK-traffic.pcap",
            "exemplo.pcap",
            "anomalias_seguranca.pcap"
        ]
        
        for arquivo in arquivos_alternativos:
            if os.path.exists(arquivo):
                arquivo_teste = arquivo
                break
        
        if not os.path.exists(arquivo_teste):
            print("‚ùå Nenhum arquivo PCAP encontrado para teste!")
            return False
    
    print(f"üìÅ Arquivo de teste: {arquivo_teste}")
    
    try:
        # Importar apenas as fun√ß√µes que precisamos
        sys.path.append('pcap_web')
        from analyzer.pcap_analyzer import extrair_tcp_streams_com_tshark, YARA_ENABLED, YARA_RULES
        
        print(f"\n‚úÖ Importa√ß√µes realizadas com sucesso")
        print(f"üìã YARA habilitado: {YARA_ENABLED}")
        
        # 1. Testar extra√ß√£o de streams TCP
        print(f"\nüîß TESTANDO EXTRA√á√ÉO DE STREAMS TCP")
        print("-" * 40)
        
        tcp_streams = extrair_tcp_streams_com_tshark(arquivo_teste)
        
        if tcp_streams:
            print(f"‚úÖ Sucesso! {len(tcp_streams)} streams TCP extra√≠dos")
            
            # Mostrar detalhes dos primeiros streams
            for i, stream in enumerate(tcp_streams[:3]):
                print(f"   üìÑ Stream {stream['stream_id']}: {stream['tamanho']} bytes")
        else:
            print("‚ÑπÔ∏è Nenhum stream TCP extra√≠do (pode ser normal dependendo do PCAP)")
        
        # 2. Testar an√°lise YARA nos streams (se dispon√≠vel)
        if YARA_ENABLED and tcp_streams:
            print(f"\nüîß TESTANDO AN√ÅLISE YARA NOS STREAMS")
            print("-" * 40)
            
            deteccoes_streams = 0
            
            for stream_info in tcp_streams:
                try:
                    with open(stream_info['arquivo'], 'rb') as f:
                        stream_data = f.read()
                    
                    matches = YARA_RULES.match(data=stream_data, timeout=3)
                    
                    if matches:
                        deteccoes_streams += len(matches)
                        for match in matches:
                            print(f"   üö® DETEC√á√ÉO: {match.rule} em stream {stream_info['stream_id']}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erro ao analisar stream {stream_info['stream_id']}: {e}")
            
            if deteccoes_streams > 0:
                print(f"‚úÖ {deteccoes_streams} detec√ß√µes encontradas nos streams TCP!")
            else:
                print("‚ÑπÔ∏è Nenhuma detec√ß√£o YARA nos streams TCP")
        
        elif not YARA_ENABLED:
            print(f"\n‚ö†Ô∏è YARA n√£o est√° habilitado - an√°lise de malware limitada")
            
        # 3. Teste b√°sico da fun√ß√£o principal (se quiser testar integra√ß√£o)
        print(f"\nüîß TESTANDO INTEGRA√á√ÉO NO SISTEMA PRINCIPAL")
        print("-" * 40)
        
        from analyzer.pcap_analyzer import analyze_pcap_with_llm
        
        # Teste r√°pido (s√≥ verificar se n√£o h√° erro de execu√ß√£o)
        try:
            resultado = analyze_pcap_with_llm(arquivo_teste, modelo="llama3")
            
            # Verificar se as novas funcionalidades aparecem no relat√≥rio
            analise_texto = resultado.get('raw_data', '')
            
            melhorias_detectadas = []
            if "STREAMS TCP EXTRA√çDOS" in analise_texto:
                melhorias_detectadas.append("‚úÖ Extra√ß√£o de streams TCP ativa")
            
            if "DETEC√á√ïES EM STREAMS TCP" in analise_texto:
                melhorias_detectadas.append("üéØ An√°lise YARA em streams ativa")
            
            if melhorias_detectadas:
                print("üéâ MELHORIAS INTEGRADAS COM SUCESSO:")
                for melhoria in melhorias_detectadas:
                    print(f"   {melhoria}")
            else:
                print("‚ÑπÔ∏è Sistema funcionando (melhorias podem n√£o aparecer se n√£o houver dados)")
            
            return True
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro na integra√ß√£o: {e}")
            print("üîß As fun√ß√µes individuais funcionam, mas pode haver problema na integra√ß√£o")
            return False
    
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        return False

if __name__ == "__main__":
    print("üîß TESTE DAS MELHORIAS FOCADAS")
    print("Testando apenas: Extra√ß√£o de Streams TCP + An√°lise YARA\n")
    
    sucesso = testar_melhorias_focadas()
    
    if sucesso:
        print(f"\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("üìã Funcionalidades implementadas:")
        print("   ‚Ä¢ Extra√ß√£o de streams TCP com tshark")
        print("   ‚Ä¢ An√°lise YARA em streams TCP reconstru√≠dos")
        print("   ‚Ä¢ Integra√ß√£o no sistema principal")
        print("\nüí° O sistema agora pode detectar malware que usa")
        print("   comunica√ß√£o criptografada em streams TCP completos!")
    else:
        print(f"\n‚ùå TESTE COM PROBLEMAS")
        print("Verifique os erros acima")