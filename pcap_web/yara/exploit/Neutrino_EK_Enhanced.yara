/*
    Regras YARA aprimoradas para Neutrino Exploit Kit - Foco em Payloads Reais
    
    Baseado em análises de amostras reais do Neutrino EK e IOCs conhecidos
    
    Autor: Sistema de Análise de Segurança 
    Data: 02/10/2025
    Versão: 2.0 - Melhorada para detectar payloads reais
*/

rule Neutrino_EK_Real_Payload_Signatures
{
    meta:
        description = "Detecta payloads reais do Neutrino EK baseado em amostras conhecidas"
        author = "Security Analysis System"
        date = "2025-10-02"
        version = "2.0"
        family = "ExploitKit"
        severity = "critical"
        reference = "https://www.malware-traffic-analysis.net/2017/01/10/index.html"
        
    strings:
        // Assinaturas hexadecimais específicas do Neutrino
        $neutrino_sig1 = { 4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00 B8 00 00 00 }  // PE header específico
        $neutrino_sig2 = { E8 ?? ?? ?? ?? 58 83 E8 05 }  // Call/Pop shellcode pattern
        $neutrino_sig3 = { 64 A1 30 00 00 00 8B 40 0C }  // PEB access pattern
        
        // Strings específicas de payloads Neutrino conhecidos
        $payload_str1 = "kernel32" nocase
        $payload_str2 = "VirtualAlloc" nocase
        $payload_str3 = "CreateProcessA" nocase
        $payload_str4 = "WinExec" nocase
        $payload_str5 = "URLDownloadToFileA" nocase
        
        // Padrões de URL de download do Neutrino
        $download_url1 = "http://" nocase
        $download_url2 = ".exe" nocase
        $download_url3 = "/gate" nocase
        $download_url4 = "/load" nocase
        
        // Mutex específicos do Neutrino
        $mutex1 = "Global\\{" nocase
        $mutex2 = "Local\\{" nocase
        
        // Registry keys específicos
        $reg1 = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run" nocase
        $reg2 = "SYSTEM\\CurrentControlSet\\Services" nocase
        
        // Strings de anti-VM específicas
        $antivm1 = "VBoxService.exe" nocase
        $antivm2 = "vmtoolsd.exe" nocase
        $antivm3 = "vmsrvc.exe" nocase
        $antivm4 = "sandboxie" nocase
        
    condition:
        (
            // Assinatura PE + APIs perigosas
            (1 of ($neutrino_sig*) and 2 of ($payload_str*)) or
            
            // URLs de download + registry
            (2 of ($download_url*) and 1 of ($reg*)) or
            
            // Anti-VM + payload strings
            (1 of ($antivm*) and 3 of ($payload_str*)) or
            
            // Múltiplas características suspeitas
            (1 of ($mutex*) and 2 of ($payload_str*) and 1 of ($download_url*))
        )
}

rule Neutrino_EK_Encrypted_Payload
{
    meta:
        description = "Detecta payloads criptografados do Neutrino EK"
        author = "Security Analysis System"
        date = "2025-10-02"
        version = "2.0"
        family = "ExploitKit"
        severity = "high"
        
    strings:
        // Padrões de dados criptografados/codificados
        $base64_1 = /[A-Za-z0-9+\/]{50,}={0,2}/ // Base64 longo
        $xor_pattern = { 31 ?? ?? ?? ?? 81 ?? ?? ?? ?? ?? } // XOR decryption
        $rc4_pattern = { 8A ?? ?? 32 ?? ?? 88 ?? ?? } // RC4-like
        
        // Headers específicos de arquivos PE criptografados
        $encrypted_pe1 = { ?? ?? 90 00 03 00 00 00 04 00 00 00 ?? ?? 00 00 }
        $encrypted_pe2 = { ?? ?? ?? ?? 58 83 ?? 05 } // Encrypted call/pop
        
        // Strings que indicam descriptografia
        $decrypt1 = "decrypt" nocase
        $decrypt2 = "decode" nocase
        $decrypt3 = "unpack" nocase
        
    condition:
        (filesize > 1KB and filesize < 5MB) and
        (
            // Base64 + padrões de criptografia
            ($base64_1 and 1 of ($xor_pattern, $rc4_pattern)) or
            
            // PE criptografado
            (1 of ($encrypted_pe*) and 1 of ($decrypt*)) or
            
            // Múltiplos padrões de criptografia
            (2 of ($xor_pattern, $rc4_pattern, $base64_1))
        )
}

rule Neutrino_EK_Dropper_Behavior
{
    meta:
        description = "Detecta comportamento típico de droppers do Neutrino EK"
        author = "Security Analysis System"
        date = "2025-10-02"
        version = "2.0"
        family = "ExploitKit"
        severity = "critical"
        
    strings:
        // Comandos específicos de dropper
        $cmd1 = "cmd.exe" nocase
        $cmd2 = "powershell" nocase
        $cmd3 = "rundll32" nocase
        $cmd4 = "regsvr32" nocase
        
        // Paths suspeitos
        $temp1 = "%TEMP%" nocase
        $temp2 = "%APPDATA%" nocase
        $temp3 = "\\Windows\\Temp\\" nocase
        $temp4 = "\\Users\\Public\\" nocase
        
        // Extensões suspeitas
        $ext1 = ".exe" nocase
        $ext2 = ".dll" nocase
        $ext3 = ".scr" nocase
        $ext4 = ".bat" nocase
        
        // Network indicators
        $net1 = "http://"
        $net2 = "https://"
        $net3 = "POST"
        $net4 = "GET"
        
        // Process injection indicators
        $inject1 = "CreateRemoteThread" nocase
        $inject2 = "VirtualAllocEx" nocase
        $inject3 = "WriteProcessMemory" nocase
        $inject4 = "SetWindowsHookEx" nocase
        
    condition:
        (filesize > 5KB and filesize < 10MB) and
        (
            // Dropper típico: comando + temp + extensão
            (1 of ($cmd*) and 1 of ($temp*) and 1 of ($ext*)) or
            
            // Network + injection
            (1 of ($net*) and 1 of ($inject*)) or
            
            // Múltiplos indicadores
            (2 of ($cmd*) and 2 of ($temp*)) or
            
            // Process injection patterns
            (2 of ($inject*) and 1 of ($temp*))
        )
}

rule Neutrino_EK_Communication_Pattern
{
    meta:
        description = "Detecta padrões de comunicação específicos do Neutrino EK"
        author = "Security Analysis System"
        date = "2025-10-02"
        version = "2.0"
        family = "ExploitKit"
        severity = "high"
        
    strings:
        // Headers HTTP específicos do Neutrino
        $http_header1 = "Accept: */*" nocase
        $http_header2 = "Connection: Keep-Alive" nocase
        $http_header3 = "Cache-Control: no-cache" nocase
        
        // User-Agents conhecidos do Neutrino
        $ua1 = "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko" nocase
        $ua2 = "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)" nocase
        $ua3 = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit" nocase
        
        // Padrões de POST data do Neutrino
        $post_data1 = "uid=" nocase
        $post_data2 = "bid=" nocase
        $post_data3 = "ver=" nocase
        $post_data4 = "os=" nocase
        
        // URLs específicas conhecidas
        $neutrino_url1 = "/forum.php" nocase
        $neutrino_url2 = "/thread.php" nocase
        $neutrino_url3 = "/tasks.php" nocase
        $neutrino_url4 = "/gate.php" nocase
        
    condition:
        (
            // Headers típicos + User-Agent
            (2 of ($http_header*) and 1 of ($ua*)) or
            
            // POST data + URL
            (2 of ($post_data*) and 1 of ($neutrino_url*)) or
            
            // Múltiplos indicadores de comunicação
            (1 of ($ua*) and 1 of ($neutrino_url*) and 1 of ($post_data*))
        )
}

rule Neutrino_EK_Exploit_Payload
{
    meta:
        description = "Detecta exploits específicos usados pelo Neutrino EK"
        author = "Security Analysis System"
        date = "2025-10-02"
        version = "2.0"
        family = "ExploitKit"
        severity = "critical"
        
    strings:
        // Flash exploit signatures
        $flash_exp1 = "flash.utils.ByteArray" nocase
        $flash_exp2 = "flash.system.ApplicationDomain.currentDomain" nocase
        $flash_exp3 = "ExternalInterface.call" nocase
        
        // JavaScript exploit patterns
        $js_exp1 = "unescape(" nocase
        $js_exp2 = "String.fromCharCode(" nocase
        $js_exp3 = "document.createElement('object')" nocase
        $js_exp4 = "ActiveXObject" nocase
        
        // Heap spray patterns
        $heap1 = /[\x90\xCC\x41]{100,}/ // NOP sleds or padding
        $heap2 = /%u9090%u9090/ // URL-encoded NOPs
        $heap3 = /\x0c\x0c\x0c\x0c/ // Heap spray pattern
        
        // ROP chain indicators
        $rop1 = { 59 C3 } // pop ecx; ret
        $rop2 = { 5A C3 } // pop edx; ret
        $rop3 = { 58 C3 } // pop eax; ret
        
    condition:
        (
            // Flash exploit + heap spray
            (1 of ($flash_exp*) and 1 of ($heap*)) or
            
            // JavaScript exploit + ROP
            (2 of ($js_exp*) and 1 of ($rop*)) or
            
            // Múltiplas técnicas de exploit
            (1 of ($flash_exp*) and 1 of ($js_exp*)) or
            
            // Heap spray intenso
            (2 of ($heap*))
        )
}